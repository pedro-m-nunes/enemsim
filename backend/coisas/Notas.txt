Algumas anotações.

IMPORTANTE:
- Por uma questão de tempo e prioridades, um item poderá ser somente de uma prova por enquanto.
- Na geração de simulados, devem ser ignorados os itens com resposta ou com parâmetros da TRI nulos.

COISAS EM PROCESSO:
- (Macro) Fazendo o gerador de simulados.
- (Alta prioridade) Sistema de simulados adaptados para o teste, conforme o desempenho nos simulados de nivelamento.
- Registro de respostas aos simulados.

COISAS A FAZER:
- Sistema de login do teste.
- Colocar validation.constraints nas entidades (e conciliar com @Column).
- Atualizar testes unitários do gerador de simulados.
- Services/controllers com as operações dos usuários (CRUD...).
- Testes unitários do CRUD das entidades.
- Acertar relacionamento de Disciplina e Resolucao com Item (resolver erros).
- Insert de provas e itens de provas.

PROBLEMAS ENCONTRADOS:
- Resolucao e Disciplina em um Set em Item (OneToMany) causam LazyInitializationException quando o item é chamado/buscado.
- (Baixa prioridade) O cascade não funcionou bem em Item.Habilidade.

DÚVIDAS/IDEIAS:
- Caminhos dos controllers: singular ou plural?
- Cores das provas: masculino ou feminino?
- Usar Repository ou Controller nos @Component?
- Permitir itens inválidos no banco? (TRI, habilidade ou resposta null)
- Como se dará a identificação dos pontos fortes/fracos? EstudanteHabilidade mesmo?
- Como usar cascade nos relacionamentos?
- Colocar alguns atributos como final? (Simulado.adaptacao)
- Usar @Basic?
- Usar @Transactional?
- Usar Postgres ou MySQL?
- Como disponibilizar o sistema?

TESTAR:
- Se os itens são removidos quando se remove um simulado (não devem).
- Quando um estudante for deletado, todos os seus simulados devem ser deletados também. (Mas estudante pode ser deletado? Ou apenas será inativado? Se for inativado, manter os simulados salvos)
- Quando um estudante for deletado, deletar também suas relações com as habilidades? Dados podem ser usados para estatísticas...
- Criar/cadastrar um estudante deve criar também seus relacionamentos com as habilidades (EstudanteHabilidade).
- ... (bastante coisa)

PRECISA DE PESQUISA:
- Spring Security (user...)
- JWT
- Fetch (lazy, eager)
- Web vs Webflux
- Spring Cloud
- Flyway (alter table...)
