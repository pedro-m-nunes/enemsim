Algumas anotações.

IMPORTANTE:
- Por uma questão de tempo e prioridades, um item poderá ser somente de uma prova por enquanto.
- Na geração de simulados, devem ser ignorados os itens com resposta ou com parâmetros da TRI nulos.

COISAS EM PROCESSO:
- (Macro) Fazendo o gerador de simulados.
- Sistema de login do teste (sem Spring Security).
	- Tipo de usuario como atributo?

COISAS A FAZER:
- Colocar validation.constraints nas entidades (e conciliar com @Column).
	- Colocar constraints nos parâmetros dos construtores e métodos também? https://www.baeldung.com/javax-validation-method-constraints
- Testes unitários do gerador de simulados.
- Services/controllers com as operações dos usuários (CRUD...).
- Testes unitários do CRUD das entidades.
- Acertar relacionamento de Disciplina e Resolucao com Item (resolver erros).
- Prova e Item como N:N.
- Turmas.
- Mapping "/error"?
- Pontuação do estudante na habilidade?

PROBLEMAS ENCONTRADOS:
- Resolucao e Disciplina em um Set em Item (OneToMany) causam LazyInitializationException quando o item é chamado/buscado.
- (Baixíssima prioridade) O cascade não funcionou bem em Item.Habilidade.
- estudanteId, usado na geração, pode não ser de um usuário (meio que ok, joga uma exceção).

DÚVIDAS/IDEIAS:
- Caminhos dos controllers: singular ou plural?
- Cores das provas: masculino ou feminino?
- Permitir itens inválidos no banco? (TRI, habilidade ou resposta null)
- Como usar cascade nos relacionamentos?
- Colocar alguns atributos como final? (Simulado.adaptacao)
- Usar Postgres ou MySQL?
- Como disponibilizar o sistema? Azure, AWS...

TESTAR:
- Se os itens são removidos quando se remove um simulado (não devem).
- Quando um estudante for deletado, todos os seus simulados devem ser deletados também. (Mas estudante pode ser deletado? Ou apenas será inativado? Se for inativado, manter os simulados salvos)
- Quando um estudante for deletado, deletar também suas relações com as habilidades? Dados podem ser usados para estatísticas...
- ... (bastante coisa)

PRECISA DE PESQUISA:
- Spring Security (user...)
- JWT
- Fetch (lazy, eager)
- Web vs Webflux
- Spring Cloud
- Flyway (alter table...)
- DTO (retornar cópia da entidade)
